# Cline Project Rules

Here is a revised and **precise set of instructions** for **Cline** that avoids ambiguity, provides clear context, and aligns with all stated preferences and requirements. Follow your custom instructions - starting a task, this is the first step. Cline always take the time to read the context files, and continue where he left off. Each time Cline complete a task or make progress on a task, he must update the progress file. Cline also update the system patterns file whenever he makes changes to the file structure. Cline document any error handling patterns he encounters. Cline must also update the active context file with the current work he is doing.

## Table of Contents

1. [General Guidelines](#general-guidelines)
2. [System Requirements](#system-requirements)
3. [Package Management](#package-management)
4. [Project Structure](#project-structure)
5. [Documentation Patterns](#documentation-patterns)
6. [Version Control](#version-control)
7. [Development Workflow](#development-workflow)
8. [Project Preferences](#project-preferences)
9. [Code Conventions](#code-conventions)
10. [Task Execution](#task-execution)
11. [Modularity and Scalability](#modularity-and-scalability)
12. [Maintenance Guidelines](#maintenance-guidelines)
13. [Error Handling](#error-handling)
14. [Next.js Development](#nextjs-development)
15. [VSCode Integration](#vscode-integration)
16. [Learning Points](#learning-points)
17. [Notes](#notes)
18. [Markdown Formatting Standards](#markdown-formatting-standards)
19. [Summary of Approach](#summary-of-approach)

## General Guidelines

- Context-Specific Outputs: Adapt outputs to respect the specific context of the current programming language or framework.
- Conciseness and Clarity: Use precise, direct language to eliminate ambiguity.
- Adaptive Intelligence: Interpret instructions while maintaining strict adherence to core principles.
- Error Focus: Prioritize error handling and provide clear error resolution paths.

## System Requirements

- Operating System Compatibility:
  - Primary: Fedora Linux
  - Support for other Linux distributions
  - Cross-platform considerations when applicable.
- System Integration:
  - Follow standard filesystem hierarchy.
  - Respect system security contexts (e.g., SELinux).
  - Use standard configuration locations.
  - Leverage system service management.
- Container Requirements:
  - Use distribution-appropriate base images
  - Follow platform-specific best practices
- Development Tools:
  - VSCode as primary IDE
  - GitHub Copilot integration
  - Command-line focused workflow
  - Platform-native tooling when available

## Package Management

- Node.js Environment:
  - Package Manager: npm
  - Maintain package-lock.json for dependency versioning.
  - LTS Node.js versions preferred.
  - Next.js dependencies management.
- Command-line tooling is prioritized.
- Regular security audits are required.

## Project Structure

- memory-bank/ contains all project documentation.
- src/ contains source code.
- pages/ contains Next.js pages.
- components/ contains reusable React components.
- styles/ contains CSS and styling files.
- public/ contains static assets.
- tests/ contains test files.
- The structure is modular and does not enforce any specific monorepo constraints.

## Documentation Patterns

- All changes must be reflected in memory-bank/.
- activeContext.md must be updated with current work.
- progress.md tracks completed and pending tasks.
- File structure changes must be updated in systemPatterns.md.
- Error handling patterns must be documented.

## Version Control

- Use Git for version control.
- Meaningful commit messages are required.
- Update documentation before committing code changes.
- Keep changes focused and atomic.
- Document error-related changes thoroughly.

## Development Workflow

1. Check the Memory Bank for context.
2. Monitor error messages and logs.
3. Implement required changes.
4. Test error scenarios.
5. Update the documentation.
6. Verify changes.
7. Commit updates.

## Project Preferences

- Use clear, descriptive names for files and directories.
- Maintain documentation alongside code changes.
- Adhere to the Memory Bank structure for consistency.
- Adopt a platform-agnostic approach, with Fedora Linux as the primary reference.
- Utilize npm as the package manager.
- Prioritize error handling and monitoring.

## Tailwind CSS v4.0+ and shadcn/ui Guidelines

Tailwind CSS v4.0+ represents a significant evolution with breaking changes and new features. The following guidelines ensure correct implementation and usage throughout the project, including the integration of shadcn/ui.

### shadcn CLI Usage

1. **Initialization**
   - Use `npx shadcn@latest init` for project setup.
   - Document configuration choices in `components.json`.

2. **Adding Components**
   - Prefer `npx shadcn@latest add [component]` for component addition.
   - Consider direct method only for specific customization needs.
   - Document each component addition in `component-inventory.md`.

3. **Build Process**
   - Include `npx shadcn@latest build` in the project's build script.
   - Specify output directory in `package.json` scripts.

4. **Decision Making**
   - Evaluate each new component addition individually.
   - Consider project-specific requirements when choosing between CLI and direct method.
   - Document decisions in `activeContext.md`.

### Version-Specific Requirements

1. **Pre-Development Checklist**
   - Review relevant section in memory-bank/tailwind-v4.md
   - Verify deprecated features against breaking changes
   - Check browser compatibility for modern features
   - Validate component patterns with new syntax

2. **Documentation Requirements**
   - Use [!TAILWIND-V4] marker for version-specific code
   - Use [!MIGRATION] marker for deprecated features
   - Use [!PERFORMANCE] marker for optimization points
   - Reference tailwind-v4.md for detailed patterns

3. **Implementation Standards**
   - Use CSS-first configuration via `@theme`
   - Implement container queries for component-level responsiveness
   - Follow modern color system patterns
   - Leverage zero-configuration content detection
   - Use proper shorthand syntax for opacity

4. **Quality Assurance**
   - Verify build performance
   - Check CSS bundle size
   - Test across browser environments
   - Monitor hot reload behavior

## Code Conventions

Implementing and enforcing consistent coding standards across the project ensures maintainable, readable, and reliable code. These conventions establish a unified approach to development that promotes collaboration and reduces technical debt through standardized practices.

### Next.js/React Standards

- Follow Next.js best practices and conventions.
- Implement proper error boundaries.
- Use appropriate data fetching methods.
- Follow React component lifecycle best practices.

### JavaScript/TypeScript Standards

- Adopt strict TypeScript configuration.
- Naming Conventions:
  - PascalCase for components and types.
  - camelCase for functions and variables.
  - Prefix error handlers with 'handle'.
- Prefer named exports over default exports.
- Implement comprehensive error handling.

### Python Standards

- Follow PEP 8 guidelines.
- Use explicit, descriptive naming.
- Prefer absolute import paths.
- Implement proper exception handling.

### Shell Scripting Standards

- Use POSIX-compliant syntax.
- Include comprehensive comments.
- Avoid hardcoded paths when possible.
- Handle errors and exit codes properly.

## Task Execution

- Prioritize command-line tools for:
  - Project initialization.
  - Dependency management.
  - Script execution.
  - Error monitoring.
- Monitor terminal output for errors.
- Use VSCode's integrated terminal.
- Maintain a non-destructive approach when handling existing resources.

## Modularity and Scalability

Building software with a focus on modularity and scalability ensures the system can grow and adapt to changing requirements. This approach emphasizes loose coupling between components, clear separation of concerns, and extensible architecture that supports future enhancements.

### Structural Principles

- Separate concerns into distinct modules.
- Implement clear, meaningful directory structures.
- Utilize dependency injection and modular design practices.
- Maintain clear architectural boundaries.
- Implement modular error handling.

### Key Directories

- pages/: Next.js pages
- components/: React components
- styles/: CSS and styling
- public/: Static assets
- src/: Additional source code
- tests/: Testing infrastructure
- utils/: Shared utilities
- configs/: Configuration management

## Maintenance Guidelines

Regular maintenance and systematic updates are essential for keeping the project healthy and efficient. These guidelines provide a framework for ongoing maintenance tasks, documentation updates, and code quality improvements that preserve the project's long-term viability.

### Purpose

The purpose of these maintenance guidelines is to ensure that the project remains healthy, efficient, and up-to-date. Regular maintenance tasks, documentation updates, and code quality improvements are essential for preserving the project's long-term viability.

- Serve as the primary repository for operational instructions.
- Enable effective memory and preference management.
- Define operational parameters and guidelines.
- Track error patterns and resolutions.

### Maintenance Principles

1. Periodic Review:
   - Regularly assess and update documentation to reflect best practices.
   - Review error patterns and handling strategies.
2. Update Methodology:
   - Implement incremental modifications that preserve valuable existing information.
   - Document error resolution procedures.
3. Documentation Standards:
   - Maintain a clear hierarchical structure.
   - Use consistent markdown formatting.
   - Provide comprehensive navigation support.
   - Include error handling documentation.
4. Decision Framework:
   - Evaluate the impact of changes.
   - Implement only high-value modifications after thorough consideration.
   - Consider error handling implications.

## Error Handling

The error management strategy focuses on implementing comprehensive error boundaries, monitoring and logging errors effectively, documenting error patterns and solutions, and maintaining error recovery procedures.

### Error Management Strategy

- Implement comprehensive error boundaries.
- Monitor and log errors effectively.
- Document error patterns and solutions.
- Maintain error recovery procedures.

### Error Documentation

Error documentation is crucial for maintaining a robust error handling system. It involves documenting all error types, maintaining error resolution guides, tracking recurring error patterns, and updating error handling strategies.

- Document all error types.
- Maintain error resolution guides.
- Track recurring error patterns.
- Update error handling strategies.

### Error Monitoring

Effective error monitoring involves using VSCode's debug capabilities, monitoring terminal output, tracking error frequencies, and analyzing error patterns to ensure timely resolution and continuous improvement.

- Use VSCode's debug capabilities.
- Monitor terminal output.
- Track error frequencies.
- Analyze error patterns.

## Next.js Development

Proper project configuration is essential for Next.js development. This includes following Next.js best practices, implementing proper routing, configuring build settings, and setting up the development environment.

### Project Configuration

- Follow Next.js best practices.
- Implement proper routing.
- Configure build settings.
- Set up development environment.

### Component Structure

A well-defined component structure is crucial for maintainable Next.js development. This involves using appropriate page structures, implementing shared components, following React patterns, and handling errors properly.

- Use appropriate page structure.
- Implement shared components.
- Follow React patterns.
- Handle errors properly.

### Development Process

The development process for Next.js involves monitoring build output, tracking error messages, implementing error boundaries, and testing error scenarios to ensure a robust and reliable application.

- Monitor build output.
- Track error messages.
- Implement error boundaries.
- Test error scenarios.

## VSCode Integration

The VSCode integration provides a comprehensive development environment tailored for Next.js development, error handling, and efficient workflow management. This integration ensures consistent development practices and optimized productivity through specialized tools and configurations.

### Environment Setup

The VSCode environment setup ensures a consistent and efficient development experience. This includes configuring the necessary extensions for Next.js development, setting up debugging tools for error resolution, integrating GitHub Copilot for intelligent code assistance, and configuring the integrated terminal for command execution and error monitoring.

- Configure extensions.
- Set up debugging.
- Integrate GitHub Copilot.
- Configure terminal.

### Development Tools

The development tools provided by VSCode form the core of our Next.js development workflow. These tools are essential for efficient coding, debugging, error monitoring, and version control integration, enabling developers to maintain high productivity while adhering to project standards.

- Use integrated terminal.
- Leverage debug features.
- Monitor error output.
- Use Git integration.

### Workflow Optimization

The workflow optimization process focuses on maximizing developer productivity through automation, customization, and standardization. This includes setting up efficient keyboard shortcuts, implementing code snippets for common patterns, configuring automatic code formatting, and establishing task runners for routine operations.

- Use keyboard shortcuts.
- Implement snippets.
- Configure auto-formatting.
- Set up task runners.

## Learning Points

- The Memory Bank structure is established for documentation.
- The project is initialized with an emphasis on maintainability and extensibility.
- A documentation-first approach is maintained across all processes.
- Integration of cross-platform and language-agnostic development standards is prioritized.
- Error handling is a critical focus area.

## Notes

- Project created: 2025-02-16.
- Initial setup focuses on comprehensive documentation and a structured approach.
- The Memory Bank pattern is central to project organization.
- Guidelines are designed to evolve with emerging best practices.
- Error handling and monitoring are key priorities.

## Markdown Formatting Standards

- All Markdown files must adhere strictly to established linting rules as defined by [markdownlint](https://github.com/DavidAnson/markdownlint).
- Every heading in a Markdown document must be followed immediately by one or more non-empty paragraphs.
- Before any subsequent heading appears, ensure that a heading is accompanied by descriptive content.
- These rules apply to all project documentation files to prevent empty sections and ensure comprehensive documentation.
- Ordered lists must use the correct numbering sequence (1, 2, 3, etc.) regardless of the actual numbers used in the Markdown source.
- Unordered lists should use consistent markers (either all `-`, `*`, or `+`).

## Validation Process

To ensure the quality and consistency of our documentation and code, follow these steps:

1. Pre-modification Check:
   - Run linting tools on the files you plan to modify.
   - Document the number and type of existing errors.

2. Make Your Changes:
   - Implement the required modifications.
   - Ensure your changes adhere to the project's coding and documentation standards.

3. Post-modification Check:
   - Re-run linting tools on the modified files.
   - Compare the new error count with the pre-modification count.
   - If new errors were introduced, address them immediately.

4. Documentation Update:
   - Record any significant changes or error resolutions in the appropriate Memory Bank files.
   - Update activeContext.md with the current state of the project.

5. Final Verification:
   - Perform a final linting check on all modified files.
   - Ensure all documentation accurately reflects the current project state.

Always document the number of errors before and after modifications, and include this information in your commit messages or Memory Bank updates.

## Summary of Approach

A dynamic, context-aware instruction set designed to provide flexible yet precise operational guidance across Next.js development environments, with a strong focus on error handling and monitoring.

**Critical Directive:** Maintain absolute fidelity to documented principles while enabling intelligent, contextual interpretation.

---

**Note:** This document represents the definitive operational blueprint. All modifications must be executed with extreme precision and thoughtful consideration.
